{"version":3,"sources":["utils/helpers.js","utils/reducers.js","utils/constants.js","utils/GlobalState.js","components/ProductItem/index.js","utils/queries.js","components/ProductList/index.js","components/CategoryMenu/index.js","components/CartItem/index.js","utils/auth.js","components/Cart/index.js","pages/Home.js","pages/Detail.js","components/Jumbotron/index.js","pages/NoMatch.js","utils/mutations.js","pages/Login.js","pages/Signup.js","components/Nav/index.js","pages/Success.js","pages/OrderHistory.js","App.js","serviceWorker.js","utils/rootReducer.js","utils/store.js","index.js","assets/spinner.gif"],"names":["idbPromise","storeName","method","object","Promise","resolve","reject","db","tx","store","request","window","indexedDB","open","onupgradeneeded","e","result","createObjectStore","keyPath","onerror","console","log","onsuccess","transaction","objectStore","put","all","getAll","delete","_id","oncomplete","close","initialState","products","reducer","state","action","type","categories","currentCategory","cartOpen","cart","product","newState","filter","length","map","purchaseQuantity","StoreContext","createContext","Provider","StoreProvider","value","props","useReducer","dispatch","useStoreContext","useContext","ProductItem","item","image","name","price","quantity","className","to","alt","src","count","pluralize","onClick","itemInCart","find","cartItem","parseInt","QUERY_PRODUCTS","gql","QUERY_CATEGORIES","QUERY_USER","QUERY_CHECKOUT","ProductList","useQuery","loading","data","useEffect","forEach","then","category","key","spinner","CategoryMenu","categoryData","id","CartItem","placeholder","onChange","target","role","aria-label","removeFromCart","decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","location","assign","removeItem","stripePromise","loadStripe","Cart","useLazyQuery","getCheckout","toggleCart","res","redirectToCheckout","sessionId","checkout","session","a","getCart","sum","toFixed","calculateTotal","Auth","loggedIn","productIds","i","push","variables","Home","Detail","useParams","useState","currentProduct","setCurrentProduct","indexedProducts","description","disabled","p","Jumbotron","children","style","height","clear","paddingTop","textAlign","NoMatch","LOGIN","ADD_ORDER","ADD_USER","Login","email","password","formState","setFormState","useMutation","login","error","handleFormSubmit","event","preventDefault","mutationResponse","handleChange","onSubmit","htmlFor","Signup","addUser","firstName","lastName","Nav","href","logout","Success","addOrder","setTimeout","saveOrder","OrderHistory","user","orders","order","purchaseDate","toLocaleDateString","index","client","ApolloClient","operation","setContext","headers","authorization","uri","App","exact","path","component","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","rootReducer","combineReducers","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","module","exports"],"mappings":"yOASO,SAASA,EAAWC,EAAWC,EAAQC,GAC5C,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAE3B,IAEIC,EAAIC,EAAIC,EAFNC,EAAUC,OAAOC,UAAUC,KAAK,YAAa,GAKnDH,EAAQI,gBAAkB,SAAUC,GAClC,IAAMR,EAAKG,EAAQM,OAEnBT,EAAGU,kBAAkB,WAAY,CAAEC,QAAS,QAC5CX,EAAGU,kBAAkB,aAAc,CAAEC,QAAS,QAC9CX,EAAGU,kBAAkB,OAAQ,CAAEC,QAAS,SAG1CR,EAAQS,QAAU,SAAUJ,GAC1BK,QAAQC,IAAI,uBAIdX,EAAQY,UAAY,SAAUP,GAe5B,OAbAR,EAAKG,EAAQM,OAEbR,EAAKD,EAAGgB,YAAYtB,EAAW,aAE/BQ,EAAQD,EAAGgB,YAAYvB,GAGvBM,EAAGY,QAAU,SAAUJ,GACrBK,QAAQC,IAAI,QAASN,IAKfb,GACN,IAAK,MACHO,EAAMgB,IAAItB,GACVE,EAAQF,GACR,MACF,IAAK,MACH,IAAMuB,EAAMjB,EAAMkB,SAClBD,EAAIJ,UAAY,WACdjB,EAAQqB,EAAIV,SAEd,MACF,IAAK,SACHP,EAAMmB,OAAOzB,EAAO0B,KACpB,MACF,QACET,QAAQC,IAAI,mBAKhBb,EAAGsB,WAAa,WACdvB,EAAGwB,a,oBClDLC,EAAe,CAACC,SAAS,IAElBC,EAAU,WAAmC,IAAlCC,EAAiC,uDAAzBH,EAAcI,EAAW,uCAErD,OAAQA,EAAOC,MAEX,ICtBuB,kBDuBnB,OAAO,2BACAF,GADP,IAEIF,SAAS,YAAKG,EAAOH,YAG7B,IC3ByB,oBD4BrB,OAAO,2BACAE,GADP,IACcG,WAAW,YAAKF,EAAOE,cAGzC,IC/B+B,0BDgC3B,OAAO,2BACAH,GADP,IAEII,gBAAiBH,EAAOG,kBAGhC,IClCmB,cDmCf,OAAO,2BACAJ,GADP,IAEIK,UAAU,EACVC,KAAK,GAAD,mBAAMN,EAAMM,MAAZ,CAAkBL,EAAOM,YAGrC,ICxC4B,uBDyCxB,OAAO,2BACAP,GADP,IAEIM,KAAK,GAAD,mBAAMN,EAAMM,MAAZ,YAAqBL,EAAOH,aAIxC,IC9CwB,mBD+CpB,IAAIU,EAAWR,EAAMM,KAAKG,QAAO,SAAAF,GAC7B,OAAOA,EAAQb,MAAQO,EAAOP,OAGlC,OAAO,2BACAM,GADP,IAEIK,SAAUG,EAASE,OAAS,EAC5BJ,KAAME,IAGd,ICxD4B,uBDyDxB,OAAO,2BACAR,GADP,IAEIK,UAAU,EACVC,KAAMN,EAAMM,KAAKK,KAAI,SAAAJ,GAIjB,OAHIN,EAAOP,MAAQa,EAAQb,MACvBa,EAAQK,iBAAmBX,EAAOW,kBAE/BL,OAInB,ICnEkB,aDoEd,OAAO,2BACAP,GADP,IAEIK,UAAU,EACVC,KAAM,KAEd,ICxEmB,cDyEf,OAAO,2BACAN,GADP,IAEIK,UAAWL,EAAMK,WAGzB,QACI,OAAOL,I,gBEpFba,EAAeC,0BACbC,EAAaF,EAAbE,SAGFC,EAAgB,SAAC,GAA4B,EAA1BC,MAA2B,IFoFlBpB,EEpFKqB,EAAY,iBAC/C,GFmF8BrB,EEnFc,CACxCC,SAAS,GACTQ,KAAM,GACND,UAAU,EACVF,WAAW,GACXC,gBAAgB,IF+Ebe,qBAAWpB,EAASF,IEpF3B,mBAAOG,EAAP,KAAcoB,EAAd,KASA,OADAnC,QAAQC,IAAIc,GACL,kBAACe,EAAD,eAAUE,MAAO,CAACjB,EAAOoB,IAAeF,KAG7CG,EAAkB,WACpB,OAAOC,qBAAWT,IC4CPU,I,UAAAA,EA5Df,SAAqBC,GAEnB,MAA0BH,IAA1B,mBAAOrB,EAAP,KAAcoB,EAAd,KAGEK,EAKED,EALFC,MACAC,EAIEF,EAJFE,KACAhC,EAGE8B,EAHF9B,IACAiC,EAEEH,EAFFG,MACAC,EACEJ,EADFI,SAKMtB,EAASN,EAATM,KA4BR,OACE,yBAAKuB,UAAU,kBACb,kBAAC,IAAD,CAAMC,GAAE,oBAAepC,IACrB,yBACEqC,IAAKL,EACLM,IAAG,kBAAaP,KAElB,2BAAIC,IAEN,6BACE,6BAAME,EAAN,IJ3DD,SAAmBF,EAAMO,GAC9B,OAAc,IAAVA,EACKP,EAEFA,EAAO,IIuDSQ,CAAU,OAAQN,GAAnC,aACA,kCAAQD,IAEV,4BAAQQ,QAvCM,WAEhB,IAAMC,EAAa9B,EAAK+B,MAAK,SAACC,GAAD,OAAcA,EAAS5C,MAAQA,KAGxD0C,GACFhB,EAAS,CACPlB,KFtB4B,uBEuB5BR,IAAKA,EACLkB,iBAAkB2B,SAASH,EAAWxB,kBAAoB,IAE5D/C,EAAW,OAAQ,MAAT,YAAC,eACNuE,GADK,IAERxB,iBAAkB2B,SAASH,EAAWxB,kBAAoB,OAG5DQ,EAAS,CACPlB,KFnCmB,cEoCnBK,QAAQ,2BAAMiB,GAAP,IAAaZ,iBAAkB,MAExC/C,EAAW,OAAQ,MAAT,YAAC,eAAoB2D,GAArB,IAA2BZ,iBAAkB,QAmBvD,iB,wBC5DO4B,EAAiBC,cAAH,+OA+BdC,GAfqBD,cAAH,6KAeCA,cAAH,uFAShBE,EAAaF,cAAH,iSAqBVG,EAAiBH,cAAH,qI,iBCYZI,MAjEf,WACE,MAA0BxB,IAA1B,mBAAOrB,EAAP,KAAcoB,EAAd,KAEQhB,EAAoBJ,EAApBI,gBAER,EAA0B0C,YAASN,GAA3BO,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,KAmCjB,OAjCAC,qBAAU,WAEJD,GAEF5B,EAAS,CACPlB,KJtBuB,kBIuBvBJ,SAAUkD,EAAKlD,WAGjBkD,EAAKlD,SAASoD,SAAQ,SAAC3C,GACrB1C,EAAW,WAAY,MAAO0C,OAGtBwC,GAEVlF,EAAW,WAAY,OAAOsF,MAAK,SAACrD,GAElCsB,EAAS,CACPlB,KJnCqB,kBIoCrBJ,SAAUA,SAIf,CAACkD,EAAMD,EAAS3B,IAWjB,yBAAKS,UAAU,QACb,6CACC7B,EAAMF,SAASY,OACd,yBAAKmB,UAAU,aAXdzB,EAIEJ,EAAMF,SAASW,QAAO,SAAAF,GAAO,OAAIA,EAAQ6C,SAAS1D,MAAQU,KAHxDJ,EAAMF,UAWWa,KAAI,SAAAJ,GAAO,OACzB,kBAAC,EAAD,CACE8C,IAAM9C,EAAQb,IACdA,IAAKa,EAAQb,IACb+B,MAAOlB,EAAQkB,MACfC,KAAMnB,EAAQmB,KACdC,MAAOpB,EAAQoB,MACfC,SAAUrB,EAAQqB,eAK5B,mEAEAmB,EACF,yBAAKf,IAAKsB,IAASvB,IAAI,YAAc,OCV5BwB,MArDf,WACE,MAA2BlC,IAA3B,mBAAQrB,EAAR,KAAeoB,EAAf,KAEQjB,EAAeH,EAAfG,WAER,EAAwC2C,YAASJ,GAAzCK,EAAR,EAAQA,QAAeS,EAAvB,EAAiBR,KA+BjB,OA7BAC,qBAAU,WAEJO,GAEFpC,EAAS,CACPlB,KLlByB,oBKmBzBC,WAAYqD,EAAarD,aAE3BqD,EAAarD,WAAW+C,SAAQ,SAAAE,GAC9BvF,EAAW,aAAc,MAAOuF,OAExBL,GACVlF,EAAW,aAAc,OAAOsF,MAAK,SAAAhD,GACnCiB,EAAS,CACPlB,KL3BuB,oBK4BvBC,WAAYA,SAIjB,CAACqD,EAAcT,EAAS3B,IAWzB,6BACE,kDACCjB,EAAWQ,KAAI,SAAAa,GAAI,OAClB,4BACE6B,IAAK7B,EAAK9B,IACVyC,QAAS,WAdG,IAAAsB,IAeEjC,EAAK9B,IAdzB0B,EAAS,CACPlB,KLnCiC,0BKoCjCE,gBAAiBqD,MAeZjC,EAAKE,W,iCCoBDgC,EAlEE,SAAC,GAAc,IAAZlC,EAAW,EAAXA,KAElB,EAAqBH,IAAZD,EAAT,oBAiCA,OACE,yBAAKS,UAAU,YACb,6BACE,yBACEG,IAAG,kBAAaR,EAAKC,OACrBM,IAAI,MAGR,6BACE,6BAAMP,EAAKE,KAAX,MAAoBF,EAAKG,OACzB,6BACE,sCACA,2BACEzB,KAAK,SACLyD,YAAY,IACZ1C,MAAOO,EAAKZ,iBACZgD,SArCO,SAAChF,GAChB,IAAMqC,EAAQrC,EAAEiF,OAAO5C,MAET,MAAVA,GACFG,EAAU,CACRlB,KNnBwB,mBMoBxBR,IAAK8B,EAAK9B,MAEZ7B,EAAW,OAAQ,SAAT,eAAwB2D,MAGlCJ,EAAS,CACPlB,KNzB4B,uBM0B5BR,IAAK8B,EAAK9B,IACVkB,iBAAkB2B,SAAStB,KAE7BpD,EAAW,OAAQ,MAAT,YAAC,eAAoB2D,GAArB,IAA2BZ,iBAAkB2B,SAAStB,UAuB5D,0BACE6C,KAAK,MACLC,aAAW,QACX5B,QAAS,kBApDI,SAAAX,GACrBJ,EAAS,CACPlB,KNN0B,mBMO1BR,IAAK8B,EAAK9B,MAEZ7B,EAAW,OAAQ,SAAT,eAAwB2D,IA+CXwC,CAAexC,KAHhC,0B,iCChBK,M,0FAzCb,WACE,OAAOyC,IAAOC,KAAKC,c,sBAGrB,WAEE,IAAMC,EAAQF,KAAKC,WACnB,QAASC,IAAUF,KAAKG,eAAeD,K,4BAGzC,SAAeA,GACb,IAEE,OADgBH,IAAOG,GACXE,IAAMC,KAAKC,MAAQ,IAG/B,MAAOC,GACP,OAAO,K,sBAIX,WAEE,OAAOC,aAAaC,QAAQ,c,mBAG9B,SAAMC,GAEJF,aAAaG,QAAQ,WAAYD,GAEjCpG,OAAOsG,SAASC,OAAO,O,oBAGzB,WAEEL,aAAaM,WAAW,YAExBxG,OAAOsG,SAASC,OAAO,S,MC5BrBE,G,OAAgBC,YAAW,qCAsGlBC,EApGF,WACX,MAA0B9D,IAA1B,mBAAOrB,EAAP,KAAcoB,EAAd,KAEA,EAA+BgE,YAAaxC,GAA5C,mBAAOyC,EAAP,KAAsBrC,EAAtB,KAAsBA,KAuBtB,SAASsC,IACPlE,EAAS,CAAElB,KR/BY,gBQ2DzB,OAjDA+C,qBAAU,WACJD,GACFiC,EAAc9B,MAAK,SAACoC,GAClBA,EAAIC,mBAAmB,CAAEC,UAAWzC,EAAK0C,SAASC,eAGrD,CAAC3C,IAEJC,qBAAU,WAAK,4CACb,4BAAA2C,EAAA,sEACqB/H,EAAW,OAAQ,OADxC,OACQyC,EADR,OAEEc,EAAS,CAAElB,KRzBmB,uBQyBSJ,SAAS,YAAKQ,KAFvD,4CADa,sBAMTN,EAAMM,KAAKI,QAND,WAAD,wBAOXmF,KAED,CAAC7F,EAAMM,KAAKI,OAAQU,IAgCnBpB,EAAMK,SAWR,yBAAKwB,UAAU,QACb,yBAAKA,UAAU,QAAQM,QAASmD,GAAhC,WACA,6CACCtF,EAAMM,KAAKI,OACV,6BACGV,EAAMM,KAAKK,KAAI,SAAAa,GAAI,OAClB,kBAAC,EAAD,CAAU6B,IAAK7B,EAAK9B,IAAK8B,KAAMA,OAGjC,yBAAKK,UAAU,0BACb,2CA9CV,WACE,IAAIiE,EAAM,EAIV,OAHA9F,EAAMM,KAAK4C,SAAQ,SAAA1B,GACjBsE,GAAOtE,EAAKG,MAAQH,EAAKZ,oBAEpBkF,EAAIC,QAAQ,GAyCMC,IAGfC,EAAKC,WACH,4BAAQ/D,QAzCtB,WACE,IAAMgE,EAAa,GAEnBnG,EAAMM,KAAK4C,SAAQ,SAAC1B,GAClB,IAAK,IAAI4E,EAAI,EAAGA,EAAI5E,EAAKZ,iBAAkBwF,IACzCD,EAAWE,KAAK7E,EAAK9B,QAIzB2F,EAAY,CACViB,UAAW,CAAExG,SAAUqG,OA+Bb,YAIA,yDAKN,4BACE,0BAAMrC,KAAK,MAAMC,aAAW,WAA5B,gBADF,iDAhCJ,yBAAKlC,UAAU,cAAcM,QAASmD,GACpC,0BAAMxB,KAAK,MACXC,aAAW,SADX,kBCzDOwC,EAVF,WACX,OACE,yBAAK1E,UAAU,aACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCqHS2E,MA/Gf,WACE,MAA0BnF,IAA1B,mBAAOrB,EAAP,KAAcoB,EAAd,KACQqC,EAAOgD,cAAPhD,GAER,EAA4CiD,mBAAS,IAArD,mBAAOC,EAAP,KAAuBC,EAAvB,KAEA,EAA0B9D,YAASN,GAA3BO,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,KAETlD,EAAmBE,EAAnBF,SAAUQ,EAASN,EAATM,KA4DlB,OA1DA2C,qBAAU,WAEJnD,EAASY,OACXkG,EAAkB9G,EAASuC,MAAK,SAAA9B,GAAO,OAAIA,EAAQb,MAAQ+D,MAGpDT,GACP5B,EAAS,CACPlB,KVlCuB,kBUmCvBJ,SAAUkD,EAAKlD,WAGjBkD,EAAKlD,SAASoD,SAAQ,SAAC3C,GACrB1C,EAAW,WAAY,MAAO0C,OAIxBwC,GACRlF,EAAW,WAAY,OAAOsF,MAAK,SAAC0D,GAClCzF,EAAS,CACPlB,KV9CqB,kBU+CrBJ,SAAU+G,SAIf,CAAC/G,EAAUkD,EAAMD,EAAS3B,EAAUqC,IAkCrC,oCACGkD,GAAkBrG,EACjB,yBAAKuB,UAAU,kBACb,kBAAC,IAAD,CAAMC,GAAG,KAAT,2BAIA,4BAAK6E,EAAejF,MAEpB,2BACGiF,EAAeG,aAGlB,2BACE,0CADF,IAEIH,EAAehF,MAChB,IACD,4BAAQQ,QAjDA,WAChB,IAAMC,EAAa9B,EAAK+B,MAAK,SAACC,GAAD,OAAcA,EAAS5C,MAAQ+D,KACxDrB,GACFhB,EAAS,CACPlB,KVjD4B,uBUkD5BR,IAAK+D,EACL7C,iBAAkB2B,SAASH,EAAWxB,kBAAoB,IAE5D/C,EAAW,OAAQ,MAAT,YAAC,eACNuE,GADK,IAERxB,iBAAkB2B,SAASH,EAAWxB,kBAAoB,OAG5DQ,EAAS,CACPlB,KV9DmB,cU+DnBK,QAAQ,2BAAMoG,GAAP,IAAuB/F,iBAAkB,MAElD/C,EAAW,OAAQ,MAAT,YAAC,eAAoB8I,GAArB,IAAqC/F,iBAAkB,QAgC3D,eAGA,4BACEmG,UAAWzG,EAAK+B,MAAK,SAAA2E,GAAC,OAAIA,EAAEtH,MAAQiH,EAAejH,OACnDyC,QAhCW,WACrBf,EAAS,CACPlB,KVtE0B,mBUuE1BR,IAAKiH,EAAejH,MAGtB7B,EAAW,OAAQ,SAAT,eAAwB8I,MAwB1B,qBAQF,yBACE3E,IAAG,kBAAa2E,EAAelF,OAC/BM,IAAK4E,EAAejF,QAGtB,KAEFqB,EAAU,yBAAKf,IAAKsB,IAASvB,IAAI,YAAe,KAElD,kBAAC,EAAD,QC9GSkF,I,SAAAA,GAVf,YAAkC,IAAbC,EAAY,EAAZA,SACnB,OACE,yBACEC,MAAO,CAAEC,OAAQ,IAAKC,MAAO,OAAQC,WAAY,IAAKC,UAAW,WAEhEL,ICWQM,GAfC,WACd,OACE,6BACE,kBAAC,GAAD,KACE,kDACA,4BACE,0BAAM1D,KAAK,MAAMC,aAAW,gCAA5B,oB,SCPG0D,GAAQhF,cAAH,qMAWLiF,GAAYjF,cAAH,uSAkBTkF,GAAWlF,cAAH,oVC0CNmF,OAnEf,SAAe1G,GACb,MAAkCwF,mBAAS,CAAEmB,MAAO,GAAIC,SAAU,KAAlE,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAA2BC,YAAYR,IAAvC,mBAAOS,EAAP,KAAgBC,EAAhB,KAAgBA,MAEVC,EAAgB,uCAAG,WAAMC,GAAN,iBAAAzC,EAAA,6DACvByC,EAAMC,iBADiB,kBAGUJ,EAAM,CAAE5B,UAAW,CAAEuB,MAAOE,EAAUF,MAAOC,SAAUC,EAAUD,YAH3E,OAGfS,EAHe,OAIfnE,EAAQmE,EAAiBvF,KAAKkF,MAAM9D,MAC1C6B,EAAKiC,MAAM9D,GALU,gDAOrBnF,QAAQC,IAAR,MAPqB,yDAAH,sDAWhBsJ,EAAe,SAAAH,GACnB,MAAwBA,EAAMxE,OAAtBnC,EAAR,EAAQA,KAAMT,EAAd,EAAcA,MACd+G,EAAa,2BACRD,GADO,mBAETrG,EAAOT,MAIZ,OACE,yBAAKY,UAAU,kBACb,kBAAC,IAAD,CAAMC,GAAG,WAAT,uBAIA,qCACA,0BAAM2G,SAAUL,GACd,yBAAKvG,UAAU,+BACb,2BAAO6G,QAAQ,SAAf,kBACA,2BACE/E,YAAY,qBACZjC,KAAK,QACLxB,KAAK,QACLuD,GAAG,QACHG,SAAU4E,KAGd,yBAAK3G,UAAU,+BACb,2BAAO6G,QAAQ,OAAf,aACA,2BACE/E,YAAY,SACZjC,KAAK,WACLxB,KAAK,WACLuD,GAAG,MACHG,SAAU4E,KAIZL,EAAQ,6BACN,uBAAGtG,UAAU,cAAb,2CACO,KAEX,yBAAKA,UAAU,qBACb,4BAAQ3B,KAAK,UAAb,cC0BKyI,OAnFf,SAAgBzH,GACd,MAAkCwF,mBAAS,CAAEmB,MAAO,GAAIC,SAAU,KAAlE,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAkBC,YAAYN,IAAvBiB,EAAP,oBAEMR,EAAgB,uCAAG,WAAMC,GAAN,iBAAAzC,EAAA,6DACvByC,EAAMC,iBADiB,SAEQM,EAAQ,CACrCtC,UAAW,CACTuB,MAAOE,EAAUF,MAAOC,SAAUC,EAAUD,SAC5Ce,UAAWd,EAAUc,UAAWC,SAAUf,EAAUe,YALjC,OAEjBP,EAFiB,OAQjBnE,EAAQmE,EAAiBvF,KAAK4F,QAAQxE,MAC5C6B,EAAKiC,MAAM9D,GATY,2CAAH,sDAYhBoE,EAAe,SAAAH,GACnB,MAAwBA,EAAMxE,OAAtBnC,EAAR,EAAQA,KAAMT,EAAd,EAAcA,MACd+G,EAAa,2BACRD,GADO,mBAETrG,EAAOT,MAIZ,OACE,yBAAKY,UAAU,kBACb,kBAAC,IAAD,CAAMC,GAAG,UAAT,sBAIA,sCACA,0BAAM2G,SAAUL,GACd,yBAAKvG,UAAU,+BACb,2BAAO6G,QAAQ,aAAf,eACA,2BACE/E,YAAY,QACZjC,KAAK,YACLxB,KAAK,YACLuD,GAAG,YACHG,SAAU4E,KAGd,yBAAK3G,UAAU,+BACb,2BAAO6G,QAAQ,YAAf,cACA,2BACE/E,YAAY,OACZjC,KAAK,WACLxB,KAAK,WACLuD,GAAG,WACHG,SAAU4E,KAGd,yBAAK3G,UAAU,+BACb,2BAAO6G,QAAQ,SAAf,UACA,2BACE/E,YAAY,qBACZjC,KAAK,QACLxB,KAAK,QACLuD,GAAG,QACHG,SAAU4E,KAGd,yBAAK3G,UAAU,+BACb,2BAAO6G,QAAQ,OAAf,aACA,2BACE/E,YAAY,SACZjC,KAAK,WACLxB,KAAK,WACLuD,GAAG,MACHG,SAAU4E,KAGd,yBAAK3G,UAAU,qBACb,4BAAQ3B,KAAK,UAAb,cCtBK6I,OArDf,WAqCE,OACE,4BAAQlH,UAAU,iBAChB,4BACE,kBAAC,IAAD,CAAMC,GAAG,KACP,0BAAMgC,KAAK,MAAMC,aAAW,gBAA5B,sBADF,eAMF,6BA3CEkC,EAAKC,WAEL,wBAAIrE,UAAU,YACZ,wBAAIA,UAAU,QACZ,kBAAC,IAAD,CAAMC,GAAG,iBAAT,kBAIF,wBAAID,UAAU,QAEZ,uBAAGmH,KAAK,IAAI7G,QAAS,kBAAM8D,EAAKgD,WAAhC,YAQJ,wBAAIpH,UAAU,YACZ,wBAAIA,UAAU,QACZ,kBAAC,IAAD,CAAMC,GAAG,WAAT,WAIF,wBAAID,UAAU,QACZ,kBAAC,IAAD,CAAMC,GAAG,UAAT,cCcGoH,OAxCf,WACE,MAAmBjB,YAAYP,IAAxByB,EAAP,oBAwBA,OAtBAlG,qBAAU,WAAM,4CACd,kCAAA2C,EAAA,sEACqB/H,EAAW,OAAQ,OADxC,UACQyC,EADR,SAEQR,EAAWQ,EAAKK,KAAI,SAAAa,GAAI,OAAIA,EAAK9B,QAE1BgB,OAJf,iCAK2ByI,EAAS,CAAE7C,UAAW,CAAExG,cALnD,gBAKYkD,EALZ,EAKYA,KACYA,EAAKmG,SAASrJ,SAEtBoD,SAAQ,SAAC1B,GACnB3D,EAAW,OAAQ,SAAU2D,MATnC,QAaE4H,YAAW,WACT5K,OAAOsG,SAASC,OAAO,OACtB,KAfL,6CADc,uBAAC,WAAD,wBAmBdsE,KACC,CAACF,IAGF,6BACE,kBAAC,GAAD,KACE,wCACA,4DAGA,8ECaOG,OA7Cf,WACE,IACIC,EADIvG,EAASF,mBAASH,GAAlBK,KAOR,OAJIA,IACFuG,EAAOvG,EAAKuG,MAIZ,oCACE,yBAAK1H,UAAU,kBACb,kBAAC,IAAD,CAAMC,GAAG,KAAT,2BAECyH,EACC,oCACE,iDACqBA,EAAKV,UAD1B,IACsCU,EAAKT,UAE1CS,EAAKC,OAAO7I,KAAI,SAAC8I,GAAD,OACf,yBAAKpG,IAAKoG,EAAM/J,IAAKmC,UAAU,QAC7B,4BACG,IAAI0C,KAAKhC,SAASkH,EAAMC,eAAeC,sBAE1C,yBAAK9H,UAAU,YACZ4H,EAAM3J,SAASa,KAAI,WAA8BiJ,GAA9B,IAAGlK,EAAH,EAAGA,IAAK+B,EAAR,EAAQA,MAAOC,EAAf,EAAeA,KAAMC,EAArB,EAAqBA,MAArB,OAClB,yBAAK0B,IAAKuG,EAAO/H,UAAU,kBACzB,kBAAC,IAAD,CAAMC,GAAE,oBAAepC,IACrB,yBAAKqC,IAAKL,EAAMM,IAAG,kBAAaP,KAChC,2BAAIC,IAEN,6BACE,kCAAQC,cAQpB,QCrBNkI,GAAS,IAAIC,IAAa,CAC9BvL,QAAS,SAACwL,GACR,IAAM3F,EAAQM,aAAaC,QAAQ,YACnCoF,EAAUC,WAAW,CACnBC,QAAS,CACPC,cAAe9F,EAAK,iBAAaA,GAAU,OAIjD+F,IAAK,aA4BQC,OAzBf,SAAalJ,GAEX,OADAjC,QAAQC,IAAIgC,GAEV,kBAAC,IAAD,CAAgB2I,OAAQA,IACtB,kBAAC,IAAD,KACE,6BACE,kBAAC,EAAD,KACE,kBAAC,GAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOQ,OAAK,EAACC,KAAK,IAAIC,UAAWhE,IACjC,kBAAC,IAAD,CAAO8D,OAAK,EAACC,KAAK,SAASC,UAAW3C,KACtC,kBAAC,IAAD,CAAOyC,OAAK,EAACC,KAAK,UAAUC,UAAW5B,KACvC,kBAAC,IAAD,CAAO0B,OAAK,EAACC,KAAK,WAAWC,UAAWrB,KACxC,kBAAC,IAAD,CAAOmB,OAAK,EAACC,KAAK,gBAAgBC,UAAWjB,KAC7C,kBAAC,IAAD,CAAOe,OAAK,EAACC,KAAK,gBAAgBC,UAAW/D,IAC7C,kBAAC,IAAD,CAAO+D,UAAW/C,WCvC1BgD,GAAcC,QACW,cAA7BjM,OAAOsG,SAAS4F,UAEa,UAA7BlM,OAAOsG,SAAS4F,UAEhBlM,OAAOsG,SAAS4F,SAASC,MACvB,2DAyCJ,SAASC,GAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACT1H,MAAK,SAAA+H,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBpL,QACf+K,UAAUC,cAAcO,YAI1BtM,QAAQC,IACN,iHAKE4L,GAAUA,EAAOU,UACnBV,EAAOU,SAASN,KAMlBjM,QAAQC,IAAI,sCAGR4L,GAAUA,EAAOW,WACnBX,EAAOW,UAAUP,WAO5BQ,OAAM,SAAAvD,GACLlJ,QAAQkJ,MAAM,4CAA6CA,M,sBC5FlDwD,GAJKC,aAAgB,CAChC9L,SAAUC,ICKCzB,GALDuN,aACVF,GACAnN,OAAOsN,8BAAgCtN,OAAOsN,gCCElDC,IAASC,OACP,kBAAC,KAAD,CAAU1N,MAAOA,IACjB,kBAAC,IAAM2N,WAAP,KACE,kBAAC,GAAD,QAGFC,SAASC,eAAe,SHQnB,SAAkBrB,GACvB,GAEE,kBAAmBC,UAAW,CAI9B,GADkB,IAAIqB,IAAIC,GAAwB7N,OAAOsG,SAASkE,MACpDsD,SAAW9N,OAAOsG,SAASwH,OAIvC,OAGF9N,OAAO+N,iBAAiB,QAAQ,WAC9B,IAAM1B,EAAK,UAAMwB,GAAN,sBAEP7B,KAgEV,SAAiCK,EAAOC,GAEtC0B,MAAM3B,EAAO,CACXZ,QAAS,CAAE,iBAAkB,YAE5B9G,MAAK,SAAAsJ,GAEJ,IAAMC,EAAcD,EAASxC,QAAQ0C,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C9B,UAAUC,cAAc8B,MAAM3J,MAAK,SAAA+H,GACjCA,EAAa6B,aAAa5J,MAAK,WAC7B3E,OAAOsG,SAASkI,eAKpBpC,GAAgBC,EAAOC,MAG1BY,OAAM,WACLzM,QAAQC,IACN,oEAvFA+N,CAAwBpC,EAAOC,GAI/BC,UAAUC,cAAc8B,MAAM3J,MAAK,WACjClE,QAAQC,IACN,iHAMJ0L,GAAgBC,EAAOC,OGjC/BE,I,mBCpBAkC,EAAOC,QAAU,IAA0B,qC","file":"static/js/main.3dbbd8ab.chunk.js","sourcesContent":["export function pluralize(name, count) {\n  if (count === 1) {\n    return name\n  }\n  return name + 's'\n}\n\n\n// this is the start of creating an indexedDB \nexport function idbPromise(storeName, method, object) {\n  return new Promise((resolve, reject) => {\n    // open connection to the database 'shop-shop' with the version of 1\n    const request = window.indexedDB.open('shop-shop', 1);\n    //create veriables to hold reference to the database, transaction (tx), \n    let db, tx, store;\n\n    // if version has changed (or if this is the first time using the database ), run this method and create the three object stores \n    request.onupgradeneeded = function (e) {\n      const db = request.result;\n      //create object store for each type of data and set \"primary\" key index to be the `_id` of the data\n      db.createObjectStore('products', { keyPath: '_id' });\n      db.createObjectStore('categories', { keyPath: '_id' });\n      db.createObjectStore('cart', { keyPath: '_id' });\n    };\n    //handle any errors with connecting \n    request.onerror = function (e) {\n      console.log('There was an error');\n    };\n\n    // on database open success \n    request.onsuccess = function (e) {\n      // save a reference of the database to the 'db' variable\n      db = request.result;\n      //open a transaction do whatever we pass into 'storeName' (must match one of the object store names)\n      tx = db.transaction(storeName, 'readwrite');\n      //save a reference to that object store\n      store = tx.objectStore(storeName);\n\n      // if there's any errors, elt us know \n      db.onerror = function (e) {\n        console.log('error', e);\n      };\n\n      // check which value we passed into the function as a method and perform that method on the object store:\n      // swith to check what the value of the method is.\n      switch (method) {\n        case 'put':\n          store.put(object);\n          resolve(object);\n          break;\n        case 'get':\n          const all = store.getAll();\n          all.onsuccess = function () {\n            resolve(all.result);\n          };\n          break;\n        case 'delete':\n          store.delete(object._id);\n          break;\n        default:\n          console.log('No valid method');\n          break;\n      }\n\n      //when the transaction is complete, close the connection this is an event listener \n      tx.oncomplete = function () {\n        db.close();\n      };\n    };\n  });\n}","//this might go at the top of the file instead try moving it if it does not work \nimport { useReducer } from 'react';\n\nimport {\n    UPDATE_PRODUCTS,\n    UPDATE_CATEGORIES,\n    UPDATE_CURRENT_CATEGORY,\n    ADD_TO_CART,\n    ADD_MULTIPLE_TO_CART,\n    REMOVE_FROM_CART,\n    UPDATE_CART_QUANTITY,\n    CLEAR_CART,\n    TOGGLE_CART\n\n} from \"./constants\";\n\nconst initialState = {products:[]}\n\nexport const reducer = (state = initialState, action) => {\n\n    switch (action.type) {\n        //if action type value is the value of 'UPDATE_PRODUCTS', return a new state object with an updated products array.\n        case UPDATE_PRODUCTS:\n            return {\n                ...state,\n                products: [...action.products],\n            };\n        /// // if action type value is the value of `UPDATE_CATEGORIES`, return a new state object with an updated categories array\n        case UPDATE_CATEGORIES:\n            return {\n                ...state, categories: [...action.categories]\n            };\n        // updating the state of UPDATE_CURRENT_CATEGORY to a new string value instead of an array. \n        case UPDATE_CURRENT_CATEGORY:\n            return {\n                ...state,\n                currentCategory: action.currentCategory\n            };\n        // adding to cart \n        case ADD_TO_CART:\n            return {\n                ...state,\n                cartOpen: true,\n                cart: [...state.cart, action.product]\n            };\n        // Add multipul to cart \n        case ADD_MULTIPLE_TO_CART:\n            return {\n                ...state,\n                cart: [...state.cart, ...action.products],\n            };\n\n        // to remove from cart \n        case REMOVE_FROM_CART:\n            let newState = state.cart.filter(product => {\n                return product._id !== action._id;\n            });\n\n            return {\n                ...state,\n                cartOpen: newState.length > 0,\n                cart: newState\n            };\n\n        case UPDATE_CART_QUANTITY:\n            return {\n                ...state,\n                cartOpen: true,\n                cart: state.cart.map(product => {\n                    if (action._id === product._id) {\n                        product.purchaseQuantity = action.purchaseQuantity;\n                    }\n                    return product;\n                })\n            };\n        //clear cart \n        case CLEAR_CART:\n            return {\n                ...state,\n                cartOpen: false,\n                cart: []\n            };\n        case TOGGLE_CART:\n            return {\n                ...state,\n                cartOpen: !state.cartOpen\n            };\n        // if it's none of these actions, do not update state at all and keep things the same! \n        default:\n            return state;\n    }\n};\n\nexport function useProductReducer(initialState) {\n    return useReducer(reducer, initialState);\n}","export const UPDATE_PRODUCTS = \"UPDATE_PRODUCTS\"; \nexport const UPDATE_CATEGORIES = \"UPDATE_CATEGORIES\";\nexport const UPDATE_CURRENT_CATEGORY = \"UPDATE_CURRENT_CATEGORY\";\n\n// tests specifically for the cart \nexport const ADD_TO_CART = 'ADD_TO_CART';\nexport const ADD_MULTIPLE_TO_CART = 'ADD_MULTIPLE_TO_CART';\nexport const REMOVE_FROM_CART = 'REMOVE_FROM_CART';\nexport const UPDATE_CART_QUANTITY = 'UPDATE_CART_QUANTITY';\nexport const CLEAR_CART = 'CLEAR_CART';\nexport const TOGGLE_CART = 'TOGGLE_CART';\n","\n\nimport React, {createContext, useContext } from \"react\"; \nimport { useProductReducer } from \"./reducers\";\n\nconst StoreContext = createContext(); \nconst { Provider } = StoreContext; \n\n\nconst StoreProvider = ({ value =[], ...props }) => {\n    const [state, dispatch] = useProductReducer({\n        products:[], \n        cart: [],\n        cartOpen: false,\n        categories:[],\n        currentCategory:'',\n    });\n    //use this to confirm it works!\n    console.log(state);\n    return <Provider value={[state, dispatch]} {...props} />;\n};\n\nconst useStoreContext = () => {\n    return useContext(StoreContext);\n} \n\nexport { StoreProvider, useStoreContext };","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { pluralize } from \"../../utils/helpers\"\nimport { useStoreContext } from \"../../utils/GlobalState\";\nimport { ADD_TO_CART, UPDATE_CART_QUANTITY } from \"../../utils/constants\";\nimport { idbPromise } from \"../../utils/helpers\";\n\nfunction ProductItem(item) {\n\n  const [state, dispatch] = useStoreContext();\n\n  const {\n    image,\n    name,\n    _id,\n    price,\n    quantity\n  } = item;\n\n \n\n  const { cart } = state;\n\n  const addToCart = () => {\n    //find the cart item with the matching id \n    const itemInCart = cart.find((cartItem) => cartItem._id === _id);\n\n    //if there was a match, call UPDATE with a new purchase quanity  \n    if (itemInCart) {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: _id,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n      idbPromise('cart', 'put', {\n        ...itemInCart,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n    } else {\n      dispatch({\n        type: ADD_TO_CART,\n        product: { ...item, purchaseQuantity: 1 }\n      });\n      idbPromise('cart', 'put', { ...item, purchaseQuantity: 1 });\n    }\n  }\n\n\n\n  return (\n    <div className=\"card px-1 py-1\">\n      <Link to={`/products/${_id}`}>\n        <img\n          alt={name}\n          src={`/images/${image}`}\n        />\n        <p>{name}</p>\n      </Link>\n      <div>\n        <div>{quantity} {pluralize(\"item\", quantity)} in stock</div>\n        <span>${price}</span>\n      </div>\n      <button onClick={addToCart}>Add to cart</button>\n    </div>\n  );\n}\n\nexport default ProductItem;","import { gql } from '@apollo/client';\n\nexport const QUERY_PRODUCTS = gql`\n  query getProducts($category: ID) {\n    products(category: $category) {\n      _id\n      name\n      description\n      price\n      quantity\n      image\n      category {\n        _id\n      }\n    }\n  }\n`;\n\nexport const QUERY_ALL_PRODUCTS = gql`\n  {\n    products {\n      _id\n      name\n      description\n      price\n      quantity\n      category {\n        name\n      }\n    }\n  }\n`;\n\nexport const QUERY_CATEGORIES = gql`\n  {\n    categories {\n      _id\n      name\n    }\n  }\n`;\n\nexport const QUERY_USER = gql`\n  {\n    user {\n      firstName\n      lastName\n      orders {\n        _id\n        purchaseDate\n        products {\n          _id\n          name\n          description\n          price\n          quantity\n          image\n        }\n      }\n    }\n  }\n`;\n\nexport const QUERY_CHECKOUT = gql`\n  query getCheckout($products: [ID]!) {\n    checkout(products: $products) {\n      session\n    }\n  }\n`;","import React, { useEffect } from \"react\";\nimport ProductItem from \"../ProductItem\";\nimport { useStoreContext } from \"../../utils/GlobalState\";\nimport { UPDATE_PRODUCTS } from \"../../utils/constants\";\nimport { useQuery } from '@apollo/react-hooks';\nimport { QUERY_PRODUCTS } from \"../../utils/queries\";\nimport { idbPromise } from \"../../utils/helpers\";\nimport spinner from \"../../assets/spinner.gif\"\n\n\nfunction ProductList() {\n  const [state, dispatch] = useStoreContext();\n\n  const { currentCategory } = state;\n\n  const { loading, data } = useQuery(QUERY_PRODUCTS); \n  \n  useEffect(() => {\n    // if there's data to be stored \n    if (data) {\n      // let's store it in the global state object \n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products\n      });\n      // let's also take each product and save it to the IndexedDB useing the helper function \n      data.products.forEach((product) => {\n        idbPromise('products', 'put', product);\n      });\n      // add else if to check if 'loading' is undefined in the 'userQuery()' hook \n    } else if (!loading) {\n      // since we're offline, get all of the data from the 'products' store \n      idbPromise('prodcuts', 'get').then((products) => {\n        // use retrieve data to sset global sate for the offline browsing \n        dispatch({\n          type: UPDATE_PRODUCTS,\n          products: products\n        });\n      });\n     }\n  }, [data, loading, dispatch]);\n\n  function filterProducts() {\n    if (!currentCategory) {\n      return state.products;\n    }\n\n    return state.products.filter(product => product.category._id === currentCategory);\n  }\n\n  return (\n    <div className=\"my-2\">\n      <h2>Our Products:</h2>\n      {state.products.length ? (\n        <div className=\"flex-row\">\n            {filterProducts().map(product => (\n                <ProductItem\n                  key= {product._id}\n                  _id={product._id}\n                  image={product.image}\n                  name={product.name}\n                  price={product.price}\n                  quantity={product.quantity}\n                />\n            ))}\n        </div>\n      ) : (\n        <h3>You haven't added any products yet!</h3>\n      )}\n      { loading ? \n      <img src={spinner} alt=\"loading\" />: null}\n    </div>\n  );\n}\n\nexport default ProductList;","import React, { useEffect } from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport { useStoreContext } from '../../utils/GlobalState';\nimport { UPDATE_CATEGORIES, UPDATE_CURRENT_CATEGORY } from '../../utils/constants';\nimport { QUERY_CATEGORIES } from '../../utils/queries';\nimport { idbPromise } from '../../utils/helpers';\n\nfunction CategoryMenu() {\n  const [ state, dispatch] = useStoreContext();\n  \n  const { categories } = state;\n\n  const { loading, data: categoryData } = useQuery(QUERY_CATEGORIES);\n\n  useEffect(() => {\n    //if categoryData exists or has changed from the response of useQuery, then run dispatch()\n    if (categoryData) {\n      //execute our dispatch function with our action object indicating the type of action and the data to set our state for categories to\n      dispatch({\n        type: UPDATE_CATEGORIES, \n        categories: categoryData.categories\n      });\n      categoryData.categories.forEach(category => {\n        idbPromise('categories', 'put', category);\n      });\n    } else if (!loading) {\n      idbPromise('categories', 'get').then(categories => {\n        dispatch({\n          type: UPDATE_CATEGORIES,\n          categories: categories\n        });\n      });\n    }\n  }, [categoryData, loading, dispatch]); \n\n  const handleClick = id => {\n    dispatch({\n      type: UPDATE_CURRENT_CATEGORY,\n      currentCategory: id\n    });\n  };\n\n\n  return (\n    <div>\n      <h2>Choose a Category:</h2>\n      {categories.map(item => (\n        <button\n          key={item._id}\n          onClick={() => {\n            handleClick(item._id);\n          }}\n        >\n          {item.name}\n        </button>\n      ))}\n    </div>\n  );\n}\n\nexport default CategoryMenu;\n","import React from 'react';\nimport { useStoreContext } from \"../../utils/GlobalState\";\nimport { REMOVE_FROM_CART, UPDATE_CART_QUANTITY } from \"../../utils/constants\";\nimport { idbPromise } from \"../../utils/helpers\";\n\n\n\nconst CartItem = ({ item }) => {\n\n  const [, dispatch] = useStoreContext();\n\n  const removeFromCart = item => {\n    dispatch({\n      type: REMOVE_FROM_CART,\n      _id: item._id\n    });\n    idbPromise('cart', 'delete', { ...item });\n\n  };\n\n  // manually edit the quantity of shopping cart items by typing directly in the <input> elements\n  const onChange = (e) => {\n    const value = e.target.value; \n    //if the user changes the quantity to zero, we should simply delete the item from the cart\n    if (value === '0') {\n      dispatch ({\n        type: REMOVE_FROM_CART,\n        _id: item._id\n      });\n      idbPromise('cart', 'delete', { ...item });\n      // or just update the quanity \n    } else {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: item._id,\n        purchaseQuantity: parseInt(value)\n      });\n      idbPromise('cart', 'put', { ...item, purchaseQuantity: parseInt(value) });\n    }\n  };\n\n\n  return (\n    <div className=\"flex-row\">\n      <div>\n        <img\n          src={`/images/${item.image}`}\n          alt=\"\"\n        />\n      </div>\n      <div>\n        <div>{item.name}, ${item.price}</div>\n        <div>\n          <span>Qty:</span>\n          <input\n            type=\"number\"\n            placeholder=\"1\"\n            value={item.purchaseQuantity}\n            onChange={onChange}\n          />\n          <span\n            role=\"img\"\n            aria-label=\"trash\"\n            onClick={() => removeFromCart(item)}\n          >\n            🗑️\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default CartItem;","import decode from 'jwt-decode';\n\nclass AuthService {\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token);\n  }\n\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n","import React, { useEffect } from \"react\";\nimport { loadStripe } from \"@stripe/stripe-js\";\nimport { useLazyQuery } from '@apollo/react-hooks';\nimport { QUERY_CHECKOUT } from \"../../utils/queries\"\nimport { idbPromise } from \"../../utils/helpers\"\nimport CartItem from \"../CartItem\";\nimport Auth from \"../../utils/auth\";\nimport { useStoreContext } from \"../../utils/GlobalState\";\nimport { TOGGLE_CART, ADD_MULTIPLE_TO_CART } from \"../../utils/constants\";\nimport \"./style.css\";\n\n\nconst stripePromise = loadStripe('pk_test_TYooMQauvdEDq54NiTphI7jx');\n\nconst Cart = () => {\n  const [state, dispatch] = useStoreContext();\n  // The data variable will contain the checkout session, but only after the query is called with the getCheckout() function.\n  const [getCheckout, { data}] = useLazyQuery(QUERY_CHECKOUT);\n  // useeffect to check if there's anything in the states's property on load if not we will get data from indexDB cart object store\n  \n  useEffect(() => {\n    if (data) {\n      stripePromise.then((res) => {\n        res.redirectToCheckout({ sessionId: data.checkout.session });\n      });\n    }\n  }, [data]);\n  \n  useEffect(()=> {\n    async function getCart() {\n      const cart = await idbPromise('cart', 'get');\n      dispatch({ type: ADD_MULTIPLE_TO_CART, products: [...cart] });\n    };\n\n    if(!state.cart.length) {\n      getCart();\n    }\n  }, [state.cart.length, dispatch]);\n\n  \n  function toggleCart() {\n    dispatch({ type: TOGGLE_CART });\n  }\n\n  function calculateTotal() {\n    let sum = 0;\n    state.cart.forEach(item => {\n      sum += item.price * item.purchaseQuantity;\n    });\n    return sum.toFixed(2);\n  }\n\n\n  function submitCheckout() {\n    const productIds = [];\n\n    state.cart.forEach((item) => {\n      for (let i = 0; i < item.purchaseQuantity; i++) {\n        productIds.push(item._id);\n      }\n    });\n\n    getCheckout({\n      variables: { products: productIds }\n    });\n  }\n\n \n\n  if(!state.cartOpen) {\n    return(\n      <div className=\"cart-closed\" onClick={toggleCart}>\n        <span role=\"img\"\n        aria-label=\"trash\">🛒</span>\n      </div>\n    );\n  }\n\n  //open cart\n  return (\n    <div className=\"cart\">\n      <div className=\"close\" onClick={toggleCart}>[close]</div>\n      <h2>Shopping Cart</h2>\n      {state.cart.length ? (\n        <div>\n          {state.cart.map(item => (\n            <CartItem key={item._id} item={item} />\n          ))}\n\n          <div className=\"flex-row space-between\">\n            <strong>Total: ${calculateTotal()}</strong>\n\n            {\n              Auth.loggedIn() ?\n                <button onClick={submitCheckout}>\n                  Checkout\n              </button>\n                :\n                <span>(log in to check out)</span>\n            }\n          </div>\n        </div>\n      ) : (\n          <h3>\n            <span role=\"img\" aria-label=\"shocked\">\n              😱\n          </span>\n          You haven't added anything to your cart yet!\n          </h3>\n        )}\n    </div>\n  );\n};\n\nexport default Cart;","import React from \"react\";\nimport ProductList from \"../components/ProductList\";\nimport CategoryMenu from \"../components/CategoryMenu\";\nimport Cart from \"../components/Cart\";\n\nconst Home = () => {\n  return (\n    <div className=\"container\">\n      <CategoryMenu />\n      <ProductList />\n      <Cart />\n    </div>\n  );\n};\n\nexport default Home;\n","import React, { useEffect, useState } from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\nimport { useQuery } from '@apollo/react-hooks';\n\nimport Cart from \"../components/Cart\";\nimport { useStoreContext } from \"../utils/GlobalState\";\nimport {\n  REMOVE_FROM_CART,\n  UPDATE_CART_QUANTITY,\n  ADD_TO_CART,\n  UPDATE_PRODUCTS,\n} from \"../utils/constants\";\nimport { QUERY_PRODUCTS } from \"../utils/queries\";\nimport { idbPromise } from \"../utils/helpers\";\nimport spinner from '../assets/spinner.gif'\n\nfunction Detail() {\n  const [state, dispatch] = useStoreContext();\n  const { id } = useParams();\n\n  const [currentProduct, setCurrentProduct] = useState({});\n\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\n\n  const { products, cart } = state;\n\n  useEffect(() => {\n    // already in global store\n    if (products.length) {\n      setCurrentProduct(products.find(product => product._id === id));\n    } \n    // retrieved from server\n    else if (data) {\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products\n      });\n\n      data.products.forEach((product) => {\n        idbPromise('products', 'put', product);\n      });\n    }\n    // get cache from idb\n    else if (!loading) {\n      idbPromise('products', 'get').then((indexedProducts) => {\n        dispatch({\n          type: UPDATE_PRODUCTS,\n          products: indexedProducts\n        });\n      });\n    }\n  }, [products, data, loading, dispatch, id]);\n\n  const addToCart = () => {\n    const itemInCart = cart.find((cartItem) => cartItem._id === id)\n    if (itemInCart) {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: id,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n      idbPromise('cart', 'put', {\n        ...itemInCart,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n    } else {\n      dispatch({\n        type: ADD_TO_CART,\n        product: { ...currentProduct, purchaseQuantity: 1 }\n      });\n      idbPromise('cart', 'put', { ...currentProduct, purchaseQuantity: 1 });\n\n    }\n  }\n\n  const removeFromCart = () => {\n    dispatch({\n      type: REMOVE_FROM_CART,\n      _id: currentProduct._id\n    });\n\n    idbPromise('cart', 'delete', { ...currentProduct });\n  };\n\n  return (\n    <>\n      {currentProduct && cart ? (\n        <div className=\"container my-1\">\n          <Link to=\"/\">\n            ← Back to Products\n          </Link>\n\n          <h2>{currentProduct.name}</h2>\n\n          <p>\n            {currentProduct.description}\n          </p>\n\n          <p>\n            <strong>Price:</strong>\n            ${currentProduct.price}\n            {\" \"}\n            <button onClick={addToCart}>\n              Add to Cart\n            </button>\n            <button \n              disabled={!cart.find(p => p._id === currentProduct._id)} \n              onClick={removeFromCart}\n            >\n              Remove from Cart\n            </button>\n          </p>\n\n          <img\n            src={`/images/${currentProduct.image}`}\n            alt={currentProduct.name}\n          />\n        </div>\n      ) : null}\n      {\n        loading ? <img src={spinner} alt=\"loading\" /> : null\n      }\n      <Cart />\n    </>\n  );\n};\n\nexport default Detail;","import React from \"react\";\n\nfunction Jumbotron({ children }) {\n  return (\n    <div\n      style={{ height: 560, clear: \"both\", paddingTop: 120, textAlign: \"center\" }}\n    >\n      {children}\n    </div>\n  );\n}\n\nexport default Jumbotron;\n","import React from \"react\";\nimport Jumbotron from \"../components/Jumbotron\";\n\nconst NoMatch = () => {\n  return (\n    <div>\n      <Jumbotron>\n        <h1>404 Page Not Found</h1>\n        <h1>\n          <span role=\"img\" aria-label=\"Face With Rolling Eyes Emoji\">\n            🙄\n          </span>\n        </h1>\n      </Jumbotron>\n    </div>\n  );\n};\n\nexport default NoMatch;\n","import { gql } from '@apollo/client';\n\nexport const LOGIN = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;\n\nexport const ADD_ORDER = gql`\n  mutation addOrder($products: [ID]!) {\n    addOrder(products: $products) {\n      purchaseDate\n      products {\n        _id\n        name\n        description\n        price\n        quantity\n        category {\n          name\n        }\n      }\n    }\n  }\n`;\n\nexport const ADD_USER = gql`\n  mutation addUser(\n    $firstName: String!\n    $lastName: String!\n    $email: String!\n    $password: String!\n  ) {\n    addUser(\n      firstName: $firstName\n      lastName: $lastName\n      email: $email\n      password: $password\n    ) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;\n","import React, { useState } from \"react\";\nimport { useMutation } from '@apollo/react-hooks';\nimport { Link } from \"react-router-dom\";\nimport { LOGIN } from \"../utils/mutations\"\nimport Auth from \"../utils/auth\";\n\nfunction Login(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' })\n  const [login, { error }] = useMutation(LOGIN);\n\n  const handleFormSubmit = async event => {\n    event.preventDefault();\n    try {\n      const mutationResponse = await login({ variables: { email: formState.email, password: formState.password } })\n      const token = mutationResponse.data.login.token;\n      Auth.login(token);\n    } catch (e) {\n      console.log(e)\n    }\n  };\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value\n    });\n  };\n\n  return (\n    <div className=\"container my-1\">\n      <Link to=\"/signup\">\n        ← Go to Signup\n      </Link>\n\n      <h2>Login</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"email\">Email address:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"pwd\">Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        {\n          error ? <div>\n            <p className=\"error-text\" >The provided credentials are incorrect</p>\n          </div> : null\n        }\n        <div className=\"flex-row flex-end\">\n          <button type=\"submit\">\n            Submit\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\n\nexport default Login;","import React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useMutation } from '@apollo/react-hooks';\nimport Auth from \"../utils/auth\";\nimport { ADD_USER } from \"../utils/mutations\";\n\nfunction Signup(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' });\n  const [addUser] = useMutation(ADD_USER);\n\n  const handleFormSubmit = async event => {\n    event.preventDefault();\n    const mutationResponse = await addUser({\n      variables: {\n        email: formState.email, password: formState.password,\n        firstName: formState.firstName, lastName: formState.lastName\n      }\n    });\n    const token = mutationResponse.data.addUser.token;\n    Auth.login(token);\n  };\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value\n    });\n  };\n\n  return (\n    <div className=\"container my-1\">\n      <Link to=\"/login\">\n        ← Go to Login\n      </Link>\n\n      <h2>Signup</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"firstName\">First Name:</label>\n          <input\n            placeholder=\"First\"\n            name=\"firstName\"\n            type=\"firstName\"\n            id=\"firstName\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"lastName\">Last Name:</label>\n          <input\n            placeholder=\"Last\"\n            name=\"lastName\"\n            type=\"lastName\"\n            id=\"lastName\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"email\">Email:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"pwd\">Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row flex-end\">\n          <button type=\"submit\">\n            Submit\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n\n}\n\nexport default Signup;","import React from \"react\";\nimport Auth from \"../../utils/auth\";\nimport { Link } from \"react-router-dom\";\n\nfunction Nav() {\n\n  function showNavigation() {\n    if (Auth.loggedIn()) {\n      return (\n        <ul className=\"flex-row\">\n          <li className=\"mx-1\">\n            <Link to=\"/orderHistory\">\n              Order History\n            </Link>\n          </li>\n          <li className=\"mx-1\">\n            {/* this is not using the Link component to logout or user and then refresh the application to the start */}\n            <a href=\"/\" onClick={() => Auth.logout()}>\n              Logout\n            </a>\n          </li>\n        </ul>\n      );\n    } else {\n      return (\n        <ul className=\"flex-row\">\n          <li className=\"mx-1\">\n            <Link to=\"/signup\">\n              Signup\n            </Link>\n          </li>\n          <li className=\"mx-1\">\n            <Link to=\"/login\">\n              Login\n            </Link>\n          </li>\n        </ul>\n      );\n    }\n  }\n\n  return (\n    <header className=\"flex-row px-1\">\n      <h1>\n        <Link to=\"/\">\n          <span role=\"img\" aria-label=\"shopping bag\">🛍️</span>\n          -Shop-Shop\n        </Link>\n      </h1>\n\n      <nav>\n        {showNavigation()}\n      </nav>\n    </header>\n  );\n}\n\nexport default Nav;","import React, { useEffect } from \"react\";\nimport { useMutation } from '@apollo/react-hooks';\nimport Jumbotron from \"../components/Jumbotron\";\nimport { ADD_ORDER } from \"../utils/mutations\";\nimport { idbPromise } from \"../utils/helpers\";\n\nfunction Success() {\n  const [addOrder] = useMutation(ADD_ORDER);\n\n  useEffect(() => {\n    async function saveOrder() {\n      const cart = await idbPromise('cart', 'get');\n      const products = cart.map(item => item._id);\n      \n      if (products.length) {\n        const { data } = await addOrder({ variables: { products } });\n        const productData = data.addOrder.products;\n    \n        productData.forEach((item) => {\n          idbPromise('cart', 'delete', item);\n        });\n      }\n        \n      setTimeout(() => {\n        window.location.assign('/');\n      }, 3000);\n    }\n\n    saveOrder();\n  }, [addOrder]);\n\n  return (\n    <div>\n      <Jumbotron>\n        <h1>Success!</h1>\n        <h2>\n          Thank you for your purchase!\n        </h2>\n        <h2>\n          You will now be redirected to the home page\n        </h2>\n      </Jumbotron>\n    </div>\n  );\n};\n\nexport default Success;","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { useQuery } from '@apollo/client';\nimport { QUERY_USER } from '../utils/queries';\n\nfunction OrderHistory() {\n  const { data } = useQuery(QUERY_USER);\n  let user;\n\n  if (data) {\n    user = data.user;\n  }\n\n  return (\n    <>\n      <div className=\"container my-1\">\n        <Link to=\"/\">← Back to Products</Link>\n\n        {user ? (\n          <>\n            <h2>\n              Order History for {user.firstName} {user.lastName}\n            </h2>\n            {user.orders.map((order) => (\n              <div key={order._id} className=\"my-2\">\n                <h3>\n                  {new Date(parseInt(order.purchaseDate)).toLocaleDateString()}\n                </h3>\n                <div className=\"flex-row\">\n                  {order.products.map(({ _id, image, name, price }, index) => (\n                    <div key={index} className=\"card px-1 py-1\">\n                      <Link to={`/products/${_id}`}>\n                        <img alt={name} src={`/images/${image}`} />\n                        <p>{name}</p>\n                      </Link>\n                      <div>\n                        <span>${price}</span>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            ))}\n          </>\n        ) : null}\n      </div>\n    </>\n  );\n}\n\nexport default OrderHistory;\n","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { ApolloProvider } from 'react-apollo';\nimport ApolloClient from 'apollo-boost';\n\n\nimport Home from \"./pages/Home\";\nimport Detail from \"./pages/Detail\";\nimport NoMatch from \"./pages/NoMatch\";\nimport Login from \"./pages/Login\";\nimport Signup from \"./pages/Signup\";\nimport Nav from \"./components/Nav\";\n// being replaced by redux this is \nimport { StoreProvider } from \"./utils/GlobalState\";\n/// i need to import global store from \n\nimport Success from \"./pages/Success\";\nimport OrderHistory from \"./pages/OrderHistory\";\n\n/// store \n\n// action \n\n\nconst client = new ApolloClient({\n  request: (operation) => {\n    const token = localStorage.getItem('id_token')\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : ''\n      }\n    })\n  },\n  uri: '/graphql',\n})\n\nfunction App(props) {\n  console.log(props)\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div>\n          <StoreProvider>\n            <Nav />\n            <Switch>\n              <Route exact path=\"/\" component={Home} />\n              <Route exact path=\"/login\" component={Login} />\n              <Route exact path=\"/signup\" component={Signup} />\n              <Route exact path=\"/success\" component={Success} />\n              <Route exact path=\"/orderHistory\" component={OrderHistory} />\n              <Route exact path=\"/products/:id\" component={Detail} />\n              <Route component={NoMatch} />\n            </Switch>\n          </StoreProvider>\n        </div>\n      </Router>\n    </ApolloProvider>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (\n    process.env.NODE_ENV === 'production' &&\n    'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers } from \"redux\";\r\nimport { reducer } from \"./reducers\";\r\n \r\nconst rootReducer = combineReducers({\r\n    products: reducer\r\n});\r\n\r\nexport default rootReducer;","import { createStore } from 'redux';\r\nimport rootReducer from \"./rootReducer\";\r\n\r\n\r\nconst store = createStore(\r\n    rootReducer,\r\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n);\r\n\r\nexport default store; ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './utils/store'\n\nReactDOM.render(\n  <Provider store={store}>\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","module.exports = __webpack_public_path__ + \"static/media/spinner.ab497855.gif\";"],"sourceRoot":""}